import logging
from datetime import datetime

import requests
from airflow import DAG
from airflow.decorators import task
from airflow.models import Variable

# –°–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–æ–≤ API –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏–π
API_APP_URLS = {
    "development": "http://localhost:8000/comment",
    "test": "https://api.test.profcomff.com/rating/comment",
    "prod": "https://api.profcomff.com/rating/comment",
}


def get_env_variable(name: str, default=None):
    return str(Variable.get(name, default))


def get_api_url():
    environment = get_env_variable("_ENVIRONMENT", "development")
    return API_APP_URLS.get(environment, API_APP_URLS["development"])


def get_token_bot():
    return get_env_variable("TGBOT_TOKEN")


def get_token_auth():
    return get_env_variable("TOKEN_ROBOT_TIMETABLE")


def get_telegram_chat_id():
    return get_env_variable("TG_CHAT_PENDING_COMMENTS")


def fetch_comments(payload):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ö –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞ –∫–æ—Ä—Ç–µ–∂–µ–π (uuid, user_id, subject)."""
    api_url = get_api_url()
    headers = {"Authorization": get_token_auth(), "accept": "application/json"}

    response = requests.get(api_url, params=payload, headers=headers)
    if response.status_code != 200:
        logging.error("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: %s", response.text)
        return []

    return response.json().get("comments", [])


def send_comments(text: str) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ Telegram."""
    token_bot = get_token_bot()
    telegram_url = f"https://api.telegram.org/bot{token_bot}/sendMessage"
    chat_id = get_telegram_chat_id()

    req = requests.post(url=telegram_url, json={"chat_id": int(chat_id), "text": text})
    req.raise_for_status()
    logging.info("Bot send message status %d (%s)", req.status_code, req.text)


batch_size = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ –æ–¥–Ω–æ–º –±–∞—Ç—á–µ


@task(task_id="send_alert_pending_comments", retries=3)
def send_alert_pending_comments():
    payload = {"limit": batch_size, "offset": 0, "unreviewed": True}

    if str(get_env_variable("_ENVIRONMENT")) == "prod":
        while True:
            comments = fetch_comments(payload)
            if not comments:
                logging.info("No pending comments")
                break

            comments_ans = "\n\n".join(
                f"UUID: {comment['uuid']} \n üë§ –ê–≤—Ç–æ—Ä_id: {comment['user_id']} \n üí¨ –¢–µ–∫—Å—Ç: \"{comment['subject']}\" \n üîó {config.get_api_url().replace('api', 'app', 1)}/{comment['uuid']}"
                for comment in comments
            )

            send_comments(comments_ans)  # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –±–æ—Ç–∞
            payload["offset"] += batch_size

    else:
        count_comments = 0
        while True:
            comments = fetch_comments(payload)
            if not comments:
                break

            count_comments += len(comments)
            payload["offset"] += batch_size

        if str(get_env_variable("_ENVIRONMENT")) == "test":
            send_comments(
                f"TEST: {count_comments} –Ω–æ–≤—ã—Ö –∫–æ–º–º–µ—Ç–∞—Ä–∏–µ–≤"
            )  # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –±–æ—Ç–∞
        else:  # –õ–æ–≥–∏–∫–∞ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∏–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
            logging.info("Running in local environment")
            print(f"INFO: {count_comments} –Ω–æ–≤—ã—Ö –∫–æ–º–º–µ—Ç–∞—Ä–∏–µ–≤")
            logging.info(f"INFO: {count_comments} –Ω–æ–≤—ã—Ö –∫–æ–º–º–µ—Ç–∞—Ä–∏–µ–≤")


with DAG(
    dag_id="send_alert_pending_comments",
    start_date=datetime(2022, 1, 1),
    schedule_interval="*/10 * * * *",  # –ö–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
    catchup=False,
    tags=["dwh", "comments"],
    default_args={"owner": "DROPDATABASE"},
) as dag:
    send_alert_pending_comments()
