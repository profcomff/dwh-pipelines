import logging
from datetime import datetime

import requests
from airflow import DAG
from airflow.decorators import task
from airflow.models import Variable


@task(task_id="send_alert_pending_comments", retries=3)
def send_alert_pending_comments():
    token_bot = str(Variable.get("TGBOT_TOKEN"))
    token_auth = str(Variable.get("TOKEN_ROBOT_TIMETABLE"))

    API_APP_URLS = {  # –°–ø–∏—Å–æ–∫ –ê–¥—Ä–µ—Å–æ–≤
        "development": "http://localhost:8000/comment",
        "test": "https://api.test.profcomff.com/rating/comment",
        "prod": "https://api.profcomff.com/rating/comment",
    }
    API_APP_URL: str = API_APP_URLS.get(
        str(Variable.get("_ENVIRONMENT")),
        API_APP_URLS["development"],  # –ü–æ–ª—É—á–∞–µ–º url —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏
    )
    API_TG_URL = f"https://api.telegram.org/bot{token_bot}/sendMessage"

    batch_size = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ –æ–¥–Ω–æ–º –±–∞—Ç—á–µ
    payload = {"limit": batch_size, "offset": 0, "unreviewed": True}
    headers = {"Authorization": token_auth, "accept": "application/json"}

    def fetch_comments():
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ö –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞ –∫–æ—Ä—Ç–µ–∂–µ–π (uuid, user_id, subject)."""
        response = requests.get(API_APP_URL, params=payload, headers=headers)
        if response.status_code != 200:
            logging.error("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: %s", response.text)
            return []

        return response.json().get("comments", [])

    def send_comments(url: str, text: str) -> None:
        req = requests.post(
            url=url,
            json={
                "chat_id": int(Variable.get("TG_CHAT_PENDING_COMMENTS")),   # "chat_id": -4631087944 OR -1004631087944
                "text": text,
            },
        )
        req.raise_for_status()
        logging.info("Bot send message status %d (%s)", req.status_code, req.text)


    if str(Variable.get("_ENVIRONMENT")) == "test":
        count_comments = 0
        while True:
            comments = fetch_comments()
            if not comments:
                break

            count_comments += len(comments)
            payload["offset"] += batch_size

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –±–æ—Ç–∞
        send_comments(API_TG_URL, 
                      text=f'TEST: {count_comments} –Ω–æ–≤—ã—Ö –∫–æ–º–º–µ—Ç–∞—Ä–∏–µ–≤')  

    elif str(Variable.get("_ENVIRONMENT")) == "prod":
        while True:
            comments = fetch_comments()
            if not comments:
                logging.info("No pending comments")
                break

            comments_ans = "\n\n".join(
                f"UUID: {comment['uuid']} \n üë§ –ê–≤—Ç–æ—Ä_id: {comment['user_id']} \n üí¨ –¢–µ–∫—Å—Ç: \"{comment['subject']}\" \n üîó {API_APP_URL.replace('api', 'app', 1)}/{comment['uuid']}"
                for comment in comments
            )

            send_comments(API_TG_URL, comments_ans)  # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –±–æ—Ç–∞
            payload["offset"] += batch_size
    else:
        pass  # –•–∑ —á–µ —Ç—É—Ç –Ω–∞–ø–∏—Å–∞—Ç—å, –∫–∞–∫—É—é –ª–æ–≥–∏–∫—É, –ï—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ


with DAG(
    dag_id="send_alert_pending_comments",
    start_date=datetime(2022, 1, 1),
    schedule_interval="*/10 * * * *",  # üî• –ö–ê–ñ–î–´–ï 10 –ú–ò–ù–£–¢
    catchup=False,
    tags=["dwh", "comments"],
    default_args={"owner": "DROPDATABASE"},
) as dag:
    send_alert_pending_comments()
